// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		E7C4FFC91ADEA7C400E652AA /* Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = E7C4FFC41ADEA7C400E652AA /* Info.plist */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		E78812051B68F6100072E192 /* cabal.config */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = cabal.config; sourceTree = "<group>"; };
		E7C4FFC01ADEA7C400E652AA /* build.mk.debug */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = build.mk.debug; sourceTree = "<group>"; };
		E7C4FFC11ADEA7C400E652AA /* build.mk.release */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = build.mk.release; sourceTree = "<group>"; };
		E7C4FFC21ADEA7C400E652AA /* extra-packages */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = "extra-packages"; sourceTree = "<group>"; };
		E7C4FFC41ADEA7C400E652AA /* Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
		E7E54FF6195D6CEE0019278B /* GHCBuild.bundle */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = GHCBuild.bundle; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		E7E54FF3195D6CEE0019278B /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		E7E54FED195D6CEE0019278B = {
			isa = PBXGroup;
			children = (
				E7E54FF8195D6CEE0019278B /* GHCBuild */,
				E7E54FF7195D6CEE0019278B /* Products */,
			);
			sourceTree = "<group>";
		};
		E7E54FF7195D6CEE0019278B /* Products */ = {
			isa = PBXGroup;
			children = (
				E7E54FF6195D6CEE0019278B /* GHCBuild.bundle */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		E7E54FF8195D6CEE0019278B /* GHCBuild */ = {
			isa = PBXGroup;
			children = (
				E7E54FF9195D6CEE0019278B /* Supporting Files */,
			);
			path = GHCBuild;
			sourceTree = "<group>";
		};
		E7E54FF9195D6CEE0019278B /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				E78812051B68F6100072E192 /* cabal.config */,
				E7C4FFC01ADEA7C400E652AA /* build.mk.debug */,
				E7C4FFC11ADEA7C400E652AA /* build.mk.release */,
				E7C4FFC21ADEA7C400E652AA /* extra-packages */,
				E7C4FFC41ADEA7C400E652AA /* Info.plist */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		E7E54FF5195D6CEE0019278B /* GHCBuild */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = E7E54FFD195D6CEE0019278B /* Build configuration list for PBXNativeTarget "GHCBuild" */;
			buildPhases = (
				E7E54FF2195D6CEE0019278B /* Sources */,
				E7E54FF3195D6CEE0019278B /* Frameworks */,
				E7E54FF4195D6CEE0019278B /* Resources */,
				E7E55000195EA0560019278B /* ShellScript */,
				E74B393619EB607C00D60BE2 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = GHCBuild;
			productName = GHC;
			productReference = E7E54FF6195D6CEE0019278B /* GHCBuild.bundle */;
			productType = "com.apple.product-type.bundle";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		E7E54FEE195D6CEE0019278B /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastSwiftMigration = 0700;
				LastUpgradeCheck = 0610;
				ORGANIZATIONNAME = "Manuel M T Chakravarty";
				TargetAttributes = {
					E7E54FF5195D6CEE0019278B = {
						CreatedOnToolsVersion = 6.0;
					};
				};
			};
			buildConfigurationList = E7E54FF1195D6CEE0019278B /* Build configuration list for PBXProject "GHCBuild" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = E7E54FED195D6CEE0019278B;
			productRefGroup = E7E54FF7195D6CEE0019278B /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				E7E54FF5195D6CEE0019278B /* GHCBuild */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		E7E54FF4195D6CEE0019278B /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				E7C4FFC91ADEA7C400E652AA /* Info.plist in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		E74B393619EB607C00D60BE2 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "GHCBASE=$CONFIGURATION_BUILD_DIR/$CONTENTS_FOLDER_PATH/usr\nGHCBIN=$GHCBASE/bin\n\nGHC_VERSION=`$GHCBIN/ghc --numeric-version`\n\nGHCLIB=$GHCBASE/lib/ghc-${GHC_VERSION}\nGHCSHARE=$GHCBASE/share\n\necho \"Using --package-db=$GHCLIB/package.conf.d\"\n\n# Change the dylib install names of the rts to relocatable ones. We handle the rts separately as we don't prefix its name with the directory (as we need to also pick libffi.dylib up in the same directory).\nRTSNAME=`$GHCBIN/ghc-pkg --package-db=$GHCLIB/package.conf.d field rts key | cut -f 2 -d ' '`\necho \"Fix install names and rpaths: $RTSNAME\"\nfor DYLIBPATH in `ls $GHCLIB/$RTSNAME/libHSrts*-ghc${GHC_VERSION}.dylib`; do\n  echo -n \"$DYLIBPATH...\"\n  install_name_tool -id \"@rpath/$RTSNAME\" $DYLIBPATH\n  if `otool -l $DYLIBPATH | grep -q \"@loader_path/../$RTSNAME\"`; then\n    echo \"rpath ok\"\n  else\n    install_name_tool -add_rpath \"@loader_path/../$RTSNAME\" $DYLIBPATH\n    echo \"done\"\n  fi\ndone\n\n# Install further packages\nPKGS=`cat $SOURCE_ROOT/GHCBuild/extra-packages`\necho -n \"Using cabal install at \" `which cabal`\nif [ $CONFIGURATION = \"Debug\" ];\nthen\n  EXTRA_ARGS=\"$EXTRA_ARGS --disable-documentation\"\nelse\n  EXTRA_ARGS=\"$EXTRA_ARGS --with-haddock=$GHCBIN/haddock\"\nfi\n# Current cabal version doesn't let us leave out the global or user package DB. We\n# must use --reinstall to avoid that an existing package in the global or user DB with\n# the same version suppresses the installation.\nCABAL_CMD=\"/Library/Haskell/bin/cabal --config-file=$SOURCE_ROOT/GHCBuild/cabal.config install -j --prefix=$GHCLIB --bindir=$GHCLIB/bin --libdir=$GHCLIB --libexecdir=$GHCLIB/libexec --datadir=$GHCSHARE --package-db=$GHCLIB/package.conf.d --with-compiler=$GHCBIN/ghc --with-hc-pkg=$GHCBIN/ghc-pkg --with-alex=/Library/Haskell/bin/alex --with-happy=/Library/Haskell/bin/happy --allow-newer --ghc-options=-optl-Wl,-headerpad_max_install_names $EXTRA_ARGS\"\necho \"$CABAL_CMD <PACKAGE LIST>\"\n$CABAL_CMD $PKGS\n\n# Change the dylib install names of all packages (except the RTS) to relocatable ones.\nPKGS=`$GHCBIN/ghc-pkg --package-db=$GHCLIB/package.conf.d list --simple-output`\nfor PKG in $PKGS; do\n  ID=`$GHCBIN/ghc-pkg --package-db=$GHCLIB/package.conf.d field $PKG id | cut -f 2 -d ' '`\n  KEY=`$GHCBIN/ghc-pkg --package-db=$GHCLIB/package.conf.d field $PKG key | cut -f 2 -d ' '`\n  HSLIB=`$GHCBIN/ghc-pkg --package-db=$GHCLIB/package.conf.d field $PKG hs-libraries | cut -f 2 -d ' '`\n  LIBPATH=`$GHCBIN/ghc-pkg --package-db=$GHCLIB/package.conf.d field $PKG library-dirs | cut -f 2 -d ' '`\n  if [ \"x$LIBPATH\" != \"x\" -a $KEY != $RTSNAME ]; then\n    NAME=lib${HSLIB}-ghc${GHC_VERSION}.dylib\n    DIR=`basename $LIBPATH`\n    if [ `otool -D $LIBPATH/$NAME | tail -1` != \"@rpath/$DIR\" ]; then\n      echo \"Fix install name and rpath: $DIR/$NAME (key: $KEY)\"\n      install_name_tool -id \"@rpath/$DIR\" $LIBPATH/$NAME\n      if [ $? -ne 0 ]; then exit 1; fi\n      install_name_tool -add_rpath \"@loader_path/..\" $LIBPATH/$NAME\n      if [ $? -ne 0 ]; then exit 1; fi\n      # Get rid of absolute RPATHs (clutter & hiding bugs in debug w/o sandboxing) and add\n      # an RPATH relative to @loader_path including the directory of the *loaded* dylib.\n      for path in `otool -l $LIBPATH/$NAME | grep ' path ' | grep DerivedData | cut -d ' ' -f 11`; do\n        install_name_tool -delete_rpath $path $LIBPATH/$NAME\n        install_name_tool -add_rpath \"@loader_path/../`basename $path`\" $LIBPATH/$NAME\n      done\n    fi\n  fi\ndone\n# FIXME: Instead of adding all the \"@loader_path/../$PKG\" RPATHs, it would be better if we\n#        could have the $PKG in the install name right from the start. Currently, that is\n#        hard as it is too late until Cabal is done. Can we adapt Cabal?\n\n# We don't want sample binaries of library packages.\nrm -f $GHCLIB/bin/operational-TicTacToe\n\n# Not usable (relocatable) due to dynamic linking at the moment.\nrm -f $GHCLIB/bin/cpphs\n";
			showEnvVarsInLog = 0;
		};
		E7E55000195EA0560019278B /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "TARGET_TEMP_BINDIR=$TARGET_TEMP_DIR/bin\nmkdir -p $TARGET_TEMP_BINDIR\nexport PATH=$TARGET_TEMP_BINDIR:$PATH\n\n# Install location\nPREFIX=$CONFIGURATION_BUILD_DIR/$CONTENTS_FOLDER_PATH/usr\necho \"Install location $PREFIX\"\n\n# Clean to recompile\nif [ -x ${PREFIX}/bin/ghc ]; then\n  exit 0\nfi\n\n# Put a link to Alex and Happy into a bin/ directory in the build arena\nln -sf /Library/Haskell/bin/cabal $TARGET_TEMP_BINDIR/cabal\nln -sf /Library/Haskell/bin/alex  $TARGET_TEMP_BINDIR/alex\nln -sf /Library/Haskell/bin/happy $TARGET_TEMP_BINDIR/happy\nln -sf /Library/Frameworks/GHC.framework/Versions/Current/usr/bin/ghc $TARGET_TEMP_BINDIR/ghc\nln -sf /Library/Frameworks/GHC.framework/Versions/Current/usr/bin/ghc-pkg $TARGET_TEMP_BINDIR/ghc-pkg\n\n# Compile 'lndir' to create the build tree\n(cd GHCBuild/ghc/utils/lndir/; clang -O -o $TARGET_TEMP_BINDIR/lndir lndir.c)\nmkdir -p $TARGET_TEMP_DIR/ghc/\n(cd $TARGET_TEMP_DIR/ghc/; lndir $SOURCE_ROOT/GHCBuild/ghc >/dev/null; ln -sf $SOURCE_ROOT/GHCBuild/ghc/.git $TARGET_TEMP_DIR/ghc/)\n\n# Select the appropriate 'build.mk' setup\nif [ $CONFIGURATION = \"Debug\" ];\nthen\n  cp -f $SOURCE_ROOT/GHCBuild/build.mk.debug $TARGET_TEMP_DIR/ghc/mk/build.mk\nelse\n  cp -f $SOURCE_ROOT/GHCBuild/build.mk.release $TARGET_TEMP_DIR/ghc/mk/build.mk\nfi\n\n# Actual GHC build (we extend PATH to get 'autoreconf')\n(cd $TARGET_TEMP_DIR/ghc; env PATH=$PATH:/usr/local/bin perl boot)\n(cd $TARGET_TEMP_DIR/ghc; ./configure --prefix=$PREFIX)\n(cd $TARGET_TEMP_DIR/ghc; make -j7)\n(cd $TARGET_TEMP_DIR/ghc; make install)\n\n# Create a link to the library directory that is not versioned.\n# (We only ever have got one version in the framework and this simplifies other scripts.)\nGHC_VERSION=`${PREFIX}/bin/ghc --numeric-version`\n(cd ${PREFIX}/lib; ln -hfs ghc-${GHC_VERSION} ghc)\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		E7E54FF2195D6CEE0019278B /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		E7E54FFB195D6CEE0019278B /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.9;
				METAL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		E7E54FFC195D6CEE0019278B /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.9;
				METAL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
			};
			name = Release;
		};
		E7E54FFE195D6CEE0019278B /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_MODULES = YES;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = GHC/Info.plist;
				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Bundles";
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/../Frameworks @loader_path/../Frameworks";
				PRODUCT_NAME = GHCBuild;
				SKIP_INSTALL = YES;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				WRAPPER_EXTENSION = bundle;
			};
			name = Debug;
		};
		E7E54FFF195D6CEE0019278B /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_MODULES = YES;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = GHC/Info.plist;
				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Bundles";
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/../Frameworks @loader_path/../Frameworks";
				PRODUCT_NAME = GHCBuild;
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = bundle;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		E7E54FF1195D6CEE0019278B /* Build configuration list for PBXProject "GHCBuild" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E7E54FFB195D6CEE0019278B /* Debug */,
				E7E54FFC195D6CEE0019278B /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		E7E54FFD195D6CEE0019278B /* Build configuration list for PBXNativeTarget "GHCBuild" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				E7E54FFE195D6CEE0019278B /* Debug */,
				E7E54FFF195D6CEE0019278B /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = E7E54FEE195D6CEE0019278B /* Project object */;
}
